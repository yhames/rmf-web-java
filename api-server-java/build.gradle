plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.rmf'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

editorconfig {
    excludes = ['build']
}

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
    toolVersion = "8.24"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // mapstruct 추가
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // netty-socketio 추가
    implementation 'com.corundumstudio.socketio:netty-socketio:2.0.9'

    // quartz 추가
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    // rx java 추가
    implementation 'io.reactivex.rxjava3:rxjava:3.1.0'

    // mysql 추가
    implementation 'mysql:mysql-connector-java:8.0.27'

    // postgresql 추가
    implementation 'org.postgresql:postgresql:42.5.0'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // TestContainers 추가
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:mysql:1.19.3"
    testImplementation "org.testcontainers:postgresql:1.19.3"
    testImplementation "org.testcontainers:testcontainers:1.19.3"
    testImplementation "org.testcontainers:junit-jupiter:1.19.3"

    implementation "org.testcontainers:mysql:1.19.3"
    implementation "org.testcontainers:postgresql:1.19.3"
    implementation "org.testcontainers:testcontainers:1.19.3"

    // hibernate-validator 추가
    implementation 'org.hibernate.validator:hibernate-validator:7.0.2.Final'

    //스프링 시큐리티 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //JWT 추가
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'


}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}

//테스트 커버리지 측정도구
jacoco {
    toolVersion = "0.8.8"
}

def QDomainsFolder = []

for (qPattern in '**/QA'..'**/QZ') {
    QDomainsFolder.add(qPattern + '**')
}

def enumsFolder = ['**HealthStatus**', '**Period**', '**Category**']

// dto 및 외부 연동 서비스는 테스트에서 제외
def jacocoExcludesFolder = [
        '**/ApiServerJavaApplication**',
        '**/*Application**',
        '**/config**',
        '**/rmfapi**',
        '**/rosmsgs**',
        '**/exception**',
        '**/dto**',
        '**/*Converter**',
        '**/converter**',
        '**/rxjava**',
        '**/mock**',
        '**/SocketIoControllerImpl**',
        '**/SocketIoSessionServiceImpl**',
        '**/ScheduledTaskServiceImpl**',
        '**/BuildingMapServiceImpl**',
        '**/PermissionControllerImpl**',
        '**/DoorServiceImpl**',
        '**/DoorState**',
        '**/Health**',
        '**/jobs**',
        '**/websocket**',
        '**/SocketIoAuthorizationListener**',
        '**/annotation**',
        '**/constant**',
        '**/*MapStruct**'
] + QDomainsFolder + enumsFolder

// QueryDSL QDomain 테스트에서 제외
def QDomains = []

for (qPattern in '**QA'..'**QZ') {
    QDomains.add(qPattern + '*')
}

def enums = ['*.HealthStatus', '*.Period', '*.Category']

// dto 및 외부 연동 서비스는 테스트에서 제외
def jacocoExcludes = [
        '*Application*',
        '*.config.*',
        '*.rmfapi.*',
        '*.rosmsgs.*',
        '*.exception.*',
        '*.dto.*',
        '*.*Converter*',
        '*.converter*',
        '*.rxjava.*',
        '*.mock.*',
        '*.SocketIoControllerImpl*',
        '*.SocketIoSessionServiceImpl*',
        '*.ScheduledTaskServiceImpl*',
        '*.BuildingMapServiceImpl*',
        '*.PermissionControllerImpl*',
        '*.DoorServiceImpl*',
        '*.DoorState*',
        '*.Health*',
        '*.jobs.*',
        '*.websocket.*',
        '**.SocketIoAuthorizationListener*',
        '*.annotation.*',
        '*.constant.*',
        '*MapStruct*'
] + QDomains + enums

//커버리지 리포트 생성
jacocoTestReport {

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: jacocoExcludesFolder)
        })
        )
    }
}

// 커버리지 검증 조건 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            //브랜치 커버리지
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            //메소드 커버리지
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            //라인 커버리지
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            //검증에서 제외할 패키지, 클래스
            excludes = jacocoExcludes
        }
    }
}

test {
    description = 'Runs every tests.'
    useJUnitPlatform()
}

//유닛 테스트
task unitTest(type: Test) {
    group = 'verification'
    description = 'Runs only unit tests.'
    useJUnitPlatform {
        includeTags 'UnitTest'
        excludeTags 'IntegrationTest'
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

    // 유닛 테스트에서는 컨트롤러, 리포지토리 제외
    doFirst {
        jacocoTestCoverageVerification.violationRules.rules.each {
            it.excludes += ['**.controller.**', '**.repository.**', '*security.*']
        }

        jacocoTestReport {
            classDirectories.setFrom(files(sourceSets.main.output.classesDirs).asFileTree.matching {
                exclude jacocoExcludesFolder += ['**/controller/**', '**/repository/**', '**/security**']
            })
        }
    }

}

//통합 테스트
task integrationTest(type: Test) {
    group = 'verification'
    description = 'Runs only integration tests.'
    useJUnitPlatform {
        includeTags 'IntegrationTest'
        excludeTags 'UnitTest'
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

    // 통합 테스트에서는 global 제외
    doFirst {
        jacocoTestCoverageVerification.violationRules.rules.each {
            it.excludes += ['**.global.**']
        }

        jacocoTestReport {
            classDirectories.setFrom(files(sourceSets.main.output.classesDirs).asFileTree.matching {
                exclude jacocoExcludesFolder += ['**/global/**']
            })
        }
    }
}

//전체 테스트, 리포트 생성, 검증
task totalTestCoverage(type: Test) {
    group 'verification'
    description 'Runs the total tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

//유닛 테스트, 리포트 생성, 검증 task
task unitTestCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':unitTest',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['unitTest'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

//통합 테스트, 리포트 생성, 검증 task
task integrationTestCoverage(type: Test) {
    group 'verification'
    description 'Runs the integration tests with coverage'

    dependsOn(':integrationTest',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['integrationTest'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
